from typing import List, Dict

from dotenv import dotenv_values

config = dotenv_values()

USE_LLM = int(config.get("USE_LLM", "1"))
MODEL_NAME = config.get("MODEL_NAME", "stub")


def generate_answer(query: str, retrieved: List[Dict]) -> str:
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ retrieved-–∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.
    –ï—Å–ª–∏ USE_LLM=0 -> —ç–∫—Å—Ç—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –æ—Ç–≤–µ—Ç (—Ü–∏—Ç–∞—Ç—ã + –∫—Ä–∞—Ç–∫–∞—è –≤—ã–∂–∏–º–∫–∞).
    –ï—Å–ª–∏ USE_LLM=1 -> StubLLM –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç.
    """
    if not retrieved:
        return "‚ö†Ô∏è –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ (—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞)."

    if USE_LLM == 0:
        # –≠–∫—Å—Ç—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
        top_citations = retrieved[:3]
        parts = []
        for r in top_citations:
            parts.append(f"- {r['citation']}: {r['text']}")
        summary = "–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã:\n" + "\n".join(parts)
        return summary

    else:
        # –ü—Å–µ–≤–¥–æ-LLM —Ä–µ–∂–∏–º (–ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∫–∞ –±–µ–∑ –≤—ã–¥—É–º—ã–≤–∞–Ω–∏—è)
        context_texts = [r["text"] for r in retrieved[:3]]
        joined = " ".join(context_texts)
        return (
            f"üí° –°–≤–æ–¥–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É (–º–æ–¥–µ–ª—å={MODEL_NAME}):\n"
            f"{joined}\n\n"
            "–û—Ç–≤–µ—Ç —Å–æ—Å—Ç–∞–≤–ª–µ–Ω —Å—Ç—Ä–æ–≥–æ –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤."
        )
    